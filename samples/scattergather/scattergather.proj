<project library-octave="False" library-rpc="False" target_env="C++"><configuration><parameter default="5" description="" name="SIZE" policy="mandatory" type="int" /><build-option name="LIBS" /><build-option name="CFLAGS">-O0 -g</build-option><head-code>

class MyC {

	public:
	
	MyC() {
		data = new char[param::SIZE()];
	}
	
	MyC(const MyC &amp;other) {
		data = new char[param::SIZE()];
		for (int j = 0; j &lt; param::SIZE(); j++) {
			data[j] = other.data[j];
		}		
	}	
	
	MyC(int i) {
		data = new char[param::SIZE()];
		for (int j = 0; j &lt; param::SIZE(); j++) {
			data[j] = i;
		}
	}
	
	~MyC() {
		delete [] data;
	}
	
	MyC &amp; operator= (const MyC &amp; other)
        {
	        if (this != &amp;other)
	        {
			for (int j = 0; j &lt; param::SIZE(); j++) {
				data[j] = other.data[j];
			}
	        }
	        return *this;
	}

	std::string token_name() const {
		std::stringstream s;
		s &lt;&lt; "MyC: {";
		for (int j = 0; j &lt; param::SIZE(); j++) {
			s &lt;&lt; " " &lt;&lt; static_cast&lt;int&gt;(data[j]);
		}
		s &lt;&lt; " }";
		return s.str();
	}
	
	void pack(ca::Packer &amp;packer) const {
		for (int j = 0; j &lt; param::SIZE(); j++) {
			packer &lt;&lt; data[j];
		}		
	}
	
	void unpack(ca::Unpacker &amp;unpacker) {
		if (data == NULL) {
			data = new char[param::SIZE()];		
		}
		for (int j = 0; j &lt; param::SIZE(); j++) {
			unpacker &gt;&gt; data[j];
		}			
	}
	
	private:
	char *data;				
	
};

namespace ca {
	CA_FIXED_SIZE(MyC) {
		return param::SIZE();
	}
}</head-code></configuration><net id="101" name="scattergather"><area id="104" sx="126" sy="84" x="-318" y="-346"><init x="-318" y="-361">ctx.all_processes()</init></area><area id="108" sx="141" sy="93" x="-483" y="-236"><init x="-483" y="-251">[3]</init></area><area id="121" sx="138" sy="84" x="-474" y="-30"><init x="-474" y="-45">[2]</init></area><area id="138" sx="133" sy="82" x="-475" y="152"><init x="-475" y="137">[2]</init></area><place id="102" label-x="-412" label-y="-193" name="" radius="20" sx="0" sy="0" x="-412" y="-193"><place-type x="-456" y="-163">std::vector&lt;double&gt;</place-type><init x="-395" y="-223" /><code>	std::vector&lt;double&gt; v;
	v.push_back(110.3);	
	v.push_back(220.3);	
	v.push_back(330.3);	
	v.push_back(340.3);					
	place.add(v);
</code><trace trace-tokens="False" /></place><place id="103" label-x="-254" label-y="-302" name="" radius="20" sx="0" sy="0" x="-254" y="-302"><place-type x="-237" y="-285">int</place-type><init x="-237" y="-332">[0]</init><trace trace-tokens="False" /></place><place id="109" label-x="-84" label-y="-194" name="" radius="20" sx="0" sy="0" x="-84" y="-194"><place-type x="-67" y="-177">double</place-type><init x="-67" y="-224" /><trace trace-tokens="False" /></place><place id="113" label-x="267" label-y="-194" name="" radius="20" sx="0" sy="0" x="267" y="-194"><place-type x="284" y="-177">std::vector&lt;double&gt;</place-type><init x="284" y="-224" /><trace trace-tokens="False" /></place><place id="117" label-x="-252" label-y="-90" name="" radius="20" sx="0" sy="0" x="-252" y="-90"><place-type x="-235" y="-73">int</place-type><init x="-235" y="-120" /><trace trace-tokens="False" /></place><place id="119" label-x="-408" label-y="0" name="" radius="20" sx="0" sy="0" x="-408" y="0"><place-type x="-391" y="17">std::vector&lt;MyC&gt;</place-type><init x="-391" y="-30" /><code>	std::vector&lt;MyC&gt; v;
	v.push_back(1);	
	v.push_back(2);	
	v.push_back(3);	
	v.push_back(4);				
	place.add(v);	
</code><trace trace-tokens="False" /></place><place id="125" label-x="-78" label-y="0" name="" radius="20" sx="0" sy="0" x="-78" y="0"><place-type x="-61" y="17">MyC</place-type><init x="-61" y="-30" /><trace trace-tokens="False" /></place><place id="129" label-x="270" label-y="0" name="" radius="20" sx="0" sy="0" x="270" y="0"><place-type x="287" y="17">std::vector&lt;MyC&gt;</place-type><init x="287" y="-30" /><trace trace-tokens="False" /></place><place id="133" label-x="-426" label-y="198" name="" radius="20" sx="0" sy="0" x="-426" y="198"><place-type x="-420" y="222">std::vector&lt;std::string&gt;</place-type><init x="-409" y="168" /><code>	std::vector&lt;std::string&gt; v;
	v.push_back("aaaaaaaaaaaaaaaaaaaaaaaa");	
	v.push_back("bb");	
	v.push_back("ccccccccccccccccccc");	
	v.push_back("");		
	place.add(v);		
</code><trace trace-tokens="False" /></place><place id="135" label-x="-252" label-y="102" name="" radius="20" sx="0" sy="0" x="-252" y="102"><place-type x="-235" y="119">int</place-type><init x="-235" y="72" /><trace trace-tokens="False" /></place><place id="139" label-x="-72" label-y="198" name="" radius="20" sx="0" sy="0" x="-72" y="198"><place-type x="-55" y="215">std::string</place-type><init x="-55" y="168" /><trace trace-tokens="False" /></place><place id="144" label-x="276" label-y="198" name="" radius="20" sx="0" sy="0" x="276" y="198"><place-type x="293" y="215">std::vector&lt;std::string&gt;</place-type><init x="293" y="168" /><trace trace-tokens="False" /></place><transition clock="False" collective="True" id="105" label-x="-252" label-y="-193" name="trivially&#10;copyable" priority="" sx="70" sy="36" x="-287" y="-211"><guard x="-287" y="-231" /><trace>fire</trace><root x="-247" y="-171">3</root></transition><transition clock="False" collective="True" id="111" label-x="99" label-y="-194" name="" priority="10" sx="70" sy="36" x="64" y="-212"><guard x="64" y="-232" /><trace>fire</trace><root x="104" y="-172">0</root></transition><transition clock="False" collective="False" id="115" label-x="266" label-y="-281" name="" priority="11" sx="70" sy="36" x="231" y="-299"><guard x="231" y="-319" /><code>	printf("%i:", ctx.process_id());
	for (int i = 0; i &lt; var.x.size(); i++) {
		printf(" %g", var.x[i]);
	}
	printf("\n");
</code><trace>fire</trace></transition><transition clock="False" collective="True" id="122" label-x="-253" label-y="0" name="fixed size" priority="" sx="70" sy="36" x="-288" y="-18"><guard x="-288" y="-38" /><trace>fire</trace><root x="-248" y="22">2</root></transition><transition clock="False" collective="True" id="126" label-x="95" label-y="0" name="" priority="10" sx="70" sy="36" x="60" y="-18"><guard x="60" y="-38" /><trace>fire</trace><root x="100" y="22">1</root></transition><transition clock="False" collective="False" id="131" label-x="269" label-y="-72" name="" priority="11" sx="70" sy="36" x="234" y="-90"><guard x="234" y="-110" /><code>	printf("%i:", ctx.process_id());
	for (int i = 0; i &lt; var.x.size(); i++) {
		printf(" %s", ca::token_name(var.x[i]).c_str());
	}
	printf("\n");
</code><trace>fire</trace></transition><transition clock="False" collective="True" id="134" label-x="-253" label-y="198" name="generic&#10;case" priority="" sx="70" sy="36" x="-288" y="180"><guard x="-288" y="160" /><trace>fire</trace><root x="-248" y="220">2</root></transition><transition clock="False" collective="True" id="142" label-x="95" label-y="198" name="" priority="" sx="70" sy="36" x="60" y="180"><guard x="60" y="160" /><trace>fire</trace><root x="100" y="220">2</root></transition><transition clock="False" collective="False" id="146" label-x="275" label-y="126" name="" priority="" sx="70" sy="36" x="240" y="108"><guard x="240" y="88" /><code>	printf("%i:", ctx.process_id());
	for (int i = 0; i &lt; var.x.size(); i++) {
		printf(" %s", var.x[i].c_str());
	}
	printf("\n");	
	ctx.quit();
</code><trace>fire</trace></transition><edge from_item="103" id="106" to_item="105"><inscription x="-241.0" y="-246.0">c</inscription></edge><edge from_item="102" id="107" to_item="105"><inscription x="-373.0" y="-211.0">[root] data</inscription></edge><edge from_item="105" id="110" to_item="109"><inscription x="-191.0" y="-210.0">[scatter] data</inscription></edge><edge from_item="109" id="112" to_item="111"><inscription x="-9.0" y="-210.0">data</inscription></edge><edge from_item="111" id="114" to_item="113"><inscription x="155.0" y="-213.0">[gather] data</inscription></edge><edge from_item="113" id="116" to_item="115"><inscription x="275.0" y="-239.0">x</inscription></edge><edge from_item="105" id="118" to_item="117"><inscription x="-242.0" y="-146.0">c</inscription></edge><edge from_item="119" id="123" to_item="122"><inscription x="-375.0" y="-21.0">[root] data</inscription></edge><edge from_item="117" id="124" to_item="122"><inscription x="-244.0" y="-44.0">c</inscription></edge><edge from_item="122" id="127" to_item="125"><inscription x="-197.0" y="-20.0">[scatter] data</inscription></edge><edge from_item="125" id="128" to_item="126"><inscription x="0.0" y="-17.0">data</inscription></edge><edge from_item="126" id="130" to_item="129"><inscription x="153.0" y="-22.0">[gather] data</inscription></edge><edge from_item="129" id="132" to_item="131"><inscription x="282.0" y="-37.0">x</inscription></edge><edge from_item="122" id="136" to_item="135"><inscription x="-244.0" y="52.0">c</inscription></edge><edge from_item="135" id="137" to_item="134"><inscription x="-239.0" y="141.0">c</inscription></edge><edge from_item="133" id="140" to_item="134"><inscription x="-361.0" y="174.0">[root] data</inscription></edge><edge from_item="134" id="141" to_item="139"><inscription x="-178.0" y="175.0">[scatter] data</inscription></edge><edge from_item="139" id="143" to_item="142"><inscription x="-4.0" y="177.0">data</inscription></edge><edge from_item="142" id="145" to_item="144"><inscription x="158.0" y="173.0">[gather] data</inscription></edge><edge from_item="144" id="147" to_item="146"><inscription x="293.0" y="157.0">x</inscription></edge></net></project>