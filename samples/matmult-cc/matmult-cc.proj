<project library-octave="True" library-rpc="True" target_env="C++"><configuration><parameter default="3" description="" name="subsize" policy="constant" type="int" /><build-option name="LIBS" /><build-option name="USE_OCTAVE">True</build-option><build-option name="CFLAGS">-O2 -fPIC</build-option><head-code>
#include &lt;octave/oct.h&gt;
#include &lt;octave/load-save.h&gt;
#include &lt;ls-oct-binary.h&gt;

inline int steps(int process_count) {
	return sqrt(process_count);
}

inline int next1(ca::Context &amp;ctx) {
	int n = steps(ctx.process_count());	
	int r = ctx.process_id() / n;
	int c = ctx.process_id() % n;
	return r * n + ((c + 1) % n);
}

inline int next2(ca::Context &amp;ctx) {
	int n = steps(ctx.process_count());	
	int r = ctx.process_id() / n;
	int c = ctx.process_id() % n;
	return ((r + 1) % n) * n + c;
}



</head-code></configuration><net id="101" name="matmult"><area id="121" sx="64" sy="64" x="208" y="224"><init x="192" y="208">ctx.all_processes()</init></area><area id="170" sx="64" sy="64" x="-304" y="-192"><init x="-320" y="-208">ctx.all_processes()</init></area><place id="103" label-x="-416" label-y="80" name="divided&#10;B" radius="20" sx="0" sy="0" x="-416" y="80"><place-type x="-464" y="112">std::vector&lt;Matrix&gt;</place-type><init x="-399" y="50" /><trace trace-tokens="False" /></place><place id="104" label-x="-96" label-y="80" name="m2" radius="20" sx="0" sy="0" x="-96" y="80"><place-type x="-79" y="97">Matrix</place-type><init x="-79" y="50" /><trace trace-tokens="False" /></place><place id="108" label-x="-272" label-y="-160" name="guard" radius="20" sx="0" sy="0" x="-272" y="-160"><place-type x="-255" y="-143">int</place-type><init x="-255" y="-190">[0]</init><trace trace-tokens="False" /></place><place id="118" label-x="240" label-y="256" name="iter" radius="20" sx="0" sy="0" x="240" y="256"><place-type x="257" y="273">int</place-type><init x="240" y="224" /><code>	place.add(steps(ctx.process_count()));
</code><trace trace-tokens="False" /></place><place id="125" label-x="-416" label-y="-80" name="divided&#10;A" radius="20" sx="0" sy="0" x="-416" y="-80"><place-type x="-464" y="-48">std::vector&lt;Matrix&gt;</place-type><init x="-399" y="-110" /><trace trace-tokens="False" /></place><place id="128" label-x="-96" label-y="-80" name="m1" radius="20" sx="0" sy="0" x="-96" y="-80"><place-type x="-79" y="-63">Matrix</place-type><init x="-79" y="-110" /><trace trace-tokens="False" /></place><place id="133" label-x="32" label-y="176" name="result" radius="20" sx="0" sy="0" x="32" y="176"><place-type x="49" y="193">Matrix</place-type><init x="49" y="146" /><trace trace-tokens="False" /></place><place id="149" label-x="-112" label-y="256" name="" radius="20" sx="0" sy="0" x="-112" y="256"><place-type x="-160" y="288">std::vector&lt;Matrix&gt;</place-type><init x="-95" y="226" /><trace trace-tokens="False" /></place><place id="155" label-x="-448" label-y="256" name="C" radius="20" sx="0" sy="0" x="-448" y="256"><verif-final-marking>True</verif-final-marking><place-type x="-464" y="288">Matrix</place-type><init x="-431" y="226" /><interface out="output" x="-473" y="251" /><trace trace-tokens="False" /></place><place id="173" label-x="-272" label-y="0" name="guard" radius="20" sx="0" sy="0" x="-272" y="0"><place-type x="-255" y="17">int</place-type><init x="-255" y="-30" /><trace trace-tokens="False" /></place><place id="184" label-x="-640" label-y="-80" name="A" radius="20" sx="0" sy="0" x="-640" y="-80"><place-type x="-656" y="-48">Matrix</place-type><init x="-623" y="-110" /><code>	int size = steps(ctx.process_count());
	Matrix m(param::subsize() * size, param::subsize() * size);
	int number = 1;
	for (int i = 0; i &lt; param::subsize() * size; i++) {
		for (int j = 0; j &lt; param::subsize() * size; j++) {
			m(i, j) = number++;
		}
	}
	place.add(m);
</code><interface in="m1" x="-665" y="-85" /><trace trace-tokens="False" /></place><place id="185" label-x="-640" label-y="80" name="B" radius="20" sx="0" sy="0" x="-640" y="80"><place-type x="-656" y="112">Matrix</place-type><init x="-623" y="50" /><code>	int size = steps(ctx.process_count());
	Matrix m(param::subsize() * size, param::subsize() * size);
	int number = 1;
	for (int i = 0; i &lt; param::subsize() * size; i++) {
		for (int j = 0; j &lt; param::subsize() * size; j++) {
			m(i, j) = number++;
		}
	}
	place.add(m);
</code><interface in="m2" x="-665" y="75" /><trace trace-tokens="False" /></place><transition clock="False" collective="True" id="105" label-x="-269" label-y="-78" name="distribute&#10;m2" priority="" sx="70" sy="36" x="-304" y="-96"><guard x="-256" y="-115" /><root x="-264" y="-56">0</root></transition><transition clock="False" collective="False" id="117" label-x="115" label-y="2" name="multiply" priority="" sx="70" sy="36" x="80" y="-16"><guard x="96" y="-32">step &gt; 0</guard><code>	var.result += var.m1 * var.m2;
</code></transition><transition clock="False" collective="True" id="146" label-x="35" label-y="258" name="gather" priority="" sx="70" sy="36" x="0" y="240"><guard x="0" y="220" /><root x="40" y="280">0</root></transition><transition clock="False" collective="False" id="151" label-x="-269" label-y="258" name="compose" priority="" sx="70" sy="36" x="-304" y="240"><guard x="-304" y="220" /><code>	int size = steps(ctx.process_count());
	var.matrix = Matrix(size * param::subsize(), size * param::subsize());

	for (int i = 0; i &lt; ctx.process_count(); i++) {
		int row, column;
		row = i / size;
		column = i % size;
		row *= param::subsize();
		column *= param::subsize();
		for (int r = row; r &lt; row + param::subsize(); r++) {
			for (int c = column; c &lt; column + param::subsize(); c++) {
				var.matrix(r, c) = var.results[i](r - row, c - column);
			}
		}
	}
	ctx.quit();
</code></transition><transition clock="False" collective="True" id="175" label-x="-269" label-y="82" name="distribute&#10;m1" priority="" sx="70" sy="36" x="-304" y="64"><guard x="-304" y="44" /><root x="-264" y="104">0</root></transition><transition clock="False" collective="False" id="186" label-x="-541" label-y="-78" name="divide" priority="" sx="70" sy="36" x="-576" y="-96"><guard x="-576" y="-116" /><code>	int size = (int)sqrt(ctx.process_count());
	for (int i = 0; i &lt; ctx.process_count(); i++) {
		Matrix sub(param::subsize(), param::subsize());
		int row, column;
		row = i / size;
		column = (i % size - i / size + size) % size;
		row *= param::subsize();
		column *= param::subsize();
		for (int r = row; r &lt; row + param::subsize(); r++) {
			for (int c = column; c &lt; column + param::subsize(); c++) {
				sub(r - row, c - column) = var.m1(r, c);
			}
		}
		var.divided.push_back(sub);
	}
</code></transition><transition clock="False" collective="False" id="187" label-x="-541" label-y="82" name="divide" priority="" sx="70" sy="36" x="-576" y="64"><guard x="-576" y="44" /><code>
	int size = steps(ctx.process_count());
	for (int i = 0; i &lt; ctx.process_count(); i++) {
		Matrix sub(param::subsize(), param::subsize());
		int row, column;
		row = (i / size - i % size + size) % size;
		column = i % size;
		row *= param::subsize();
		column *= param::subsize();
		for (int r = row; r &lt; row + param::subsize(); r++) {
			for (int c = column; c &lt; column + param::subsize(); c++) {
				sub(r - row, c - column) = var.m2(r, c);
			}
		}
		var.divided.push_back(sub);
	}
</code></transition><edge from_item="108" id="110" to_item="105"><inscription x="-288.0" y="-128.0">g</inscription></edge><edge from_item="117" id="119" to_item="118"><inscription x="245.0" y="98.0">step - 1</inscription><point x="240" y="48" /></edge><edge from_item="118" id="120" to_item="117"><inscription x="222.0" y="-15.0">step</inscription><point x="304" y="256" /><point x="304" y="0" /></edge><edge from_item="117" id="123" to_item="104"><inscription x="-50.0" y="64.0">[if(step &gt; 1)] m2@next2(ctx)</inscription><point x="96" y="80" /></edge><edge from_item="104" id="124" to_item="117"><inscription x="-66.0" y="16.0">m2</inscription><point x="-80" y="16" /></edge><edge from_item="128" id="131" to_item="117"><inscription x="-68.0" y="-32.0">m1</inscription><point x="-80" y="-16" /></edge><edge from_item="117" id="132" to_item="128"><inscription x="-50.0" y="-96.0">[if(step &gt; 1)] m1@next1(ctx)</inscription><point x="96" y="-80" /></edge><edge bidirectional="true" from_item="133" id="134" to_item="117"><inscription x="64.0" y="160.0">result</inscription><point x="112" y="176" /></edge><edge from_item="118" id="147" to_item="146"><inscription x="139.0" y="238.0">0</inscription></edge><edge from_item="133" id="148" to_item="146"><inscription x="44.0" y="214.0">result</inscription></edge><edge from_item="146" id="150" to_item="149"><inscription x="-80.0" y="240.0">[gather]result</inscription></edge><edge from_item="149" id="152" to_item="151"><inscription x="-200.0" y="237.0">results</inscription></edge><edge from_item="151" id="156" to_item="155"><inscription x="-384.0" y="240.0">matrix</inscription></edge><edge from_item="105" id="174" to_item="173"><inscription x="-288.0" y="-48.0">g</inscription></edge><edge from_item="173" id="176" to_item="175"><inscription x="-288.0" y="32.0">g</inscription></edge><edge from_item="103" id="180" to_item="175"><inscription x="-375.0" y="64.0">[root]m2</inscription></edge><edge from_item="125" id="181" to_item="105"><inscription x="-375.0" y="-95.0">[root]m1</inscription></edge><edge from_item="186" id="188" to_item="125"><inscription x="-492.0" y="-95.0">divided</inscription></edge><edge from_item="187" id="189" to_item="103"><inscription x="-490.0" y="65.0">divided</inscription></edge><edge from_item="184" id="190" to_item="186"><inscription x="-611.0" y="-95.0">m1</inscription></edge><edge from_item="185" id="191" to_item="187"><inscription x="-610.0" y="64.0">m2</inscription></edge><edge from_item="175" id="193" to_item="133"><inscription x="-256.0" y="160.0">Matrix(param::subsize(), param::subsize()).fill(0.0)</inscription><point x="-269" y="176" /></edge><edge from_item="105" id="194" to_item="128"><inscription x="-208.0" y="-96.0">[scatter]m1</inscription></edge><edge from_item="175" id="195" to_item="104"><inscription x="-211.0" y="63.0">[scatter]m2</inscription></edge></net></project>